{"ast":null,"code":"export const addItem = item => {\n  let cart = [];\n\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n\n    cart.push({ ...item,\n      count: 1\n    }); // remove duplicates\n    // build an Array from new Set and turn it back into array using Array.from\n    // so that later we can re-map it\n    // new set will only allow unique values in it\n    // so pass the ids of each object/product\n    // If the loop tries to add the same value again, it'll get ignored\n    // ...with the array of ids we got on when first map() was used\n    // run map() on it again and return the actual product from the cart\n\n    cart = Array.from(new Set(cart.map(p => p._id))).map(id => {\n      return cart.find(p => p._id === id);\n    });\n    localStorage.setItem('cart', JSON.stringify(cart)); // next();\n  }\n};\nexport const getCart = () => {\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      return JSON.parse(localStorage.getItem('cart'));\n    }\n  }\n\n  return [];\n};\nexport const updateItem = (productId, count) => {\n  let cart = [];\n\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n\n    cart.map((product, i) => {\n      if (product._id === productId) {\n        cart[i].count = count;\n      }\n    });\n    localStorage.setItem('cart', JSON.stringify(cart));\n  }\n};\nexport const removeItem = removeProduct => {\n  let cart = [];\n\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n\n    cart.map((product, i) => {\n      if (product._id === remo) {\n        cart.splice(i, 1);\n      }\n    });\n    localStorage.setItem('cart', JSON.stringify(cart));\n  }\n\n  return cart;\n};\nexport const emptyCart = next => {\n  if (typeof window !== 'undefined') {\n    localStorage.removeItem('cart');\n    next();\n  }\n};","map":{"version":3,"sources":["/Users/KerrFamily/Desktop/FoodApp/src/Cart/carthelper.js"],"names":["addItem","item","cart","window","localStorage","getItem","JSON","parse","push","count","Array","from","Set","map","p","_id","id","find","setItem","stringify","getCart","updateItem","productId","product","i","removeItem","removeProduct","remo","splice","emptyCart","next"],"mappings":"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","sourcesContent":["export const addItem = (item) =>{\n    let cart = [];\n    if(typeof window !== 'undefined'){\n        if(localStorage.getItem('cart')){\n            cart = JSON.parse(localStorage.getItem('cart'))\n        }\n        cart.push({\n            ...item, \n            count: 1\n        })\n\n          // remove duplicates\n        // build an Array from new Set and turn it back into array using Array.from\n        // so that later we can re-map it\n        // new set will only allow unique values in it\n        // so pass the ids of each object/product\n        // If the loop tries to add the same value again, it'll get ignored\n        // ...with the array of ids we got on when first map() was used\n        // run map() on it again and return the actual product from the cart\n\n        cart = Array.from(new Set(cart.map(p => p._id))).map(id => {\n            return cart.find(p => p._id === id);\n        });\n\n        localStorage.setItem('cart', JSON.stringify(cart));\n       // next();\n    }\n};\n\nexport const getCart = () => {\n    if(typeof window !== 'undefined'){\n        if(localStorage.getItem('cart')){\n            return JSON.parse(localStorage.getItem('cart'));\n        }\n    }\n    return [];\n};\n\nexport const updateItem = (productId, count) => {\n    let cart = [];\n    if(typeof window !== 'undefined'){\n        if(localStorage.getItem('cart')){\n            cart = JSON.parse(localStorage.getItem('cart'));\n        }\n        cart.map((product, i) => {\n            if(product._id === productId){\n                cart[i].count = count;\n            }\n        })\n        localStorage.setItem('cart', JSON.stringify(cart));\n    }\n};\n\nexport const removeItem = (removeProduct) => {\n    let cart = [];\n    if(typeof window !== 'undefined'){\n        if(localStorage.getItem('cart')){\n            cart = JSON.parse(localStorage.getItem('cart'));\n        }\n        cart.map((product, i) => {\n            if(product._id === remo){\n                cart.splice(i, 1);\n            }\n        });\n        localStorage.setItem('cart', JSON.stringify(cart));\n    }\n    return cart;\n};\n\nexport const emptyCart = next => {\n    if (typeof window !== 'undefined') {\n        localStorage.removeItem('cart');\n        next();\n    }\n};"]},"metadata":{},"sourceType":"module"}