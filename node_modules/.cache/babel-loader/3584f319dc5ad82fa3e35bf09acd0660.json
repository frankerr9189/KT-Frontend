{"ast":null,"code":"import _objectSpread from\"/Users/KerrFamily/Desktop/FoodApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";export var addItem=function addItem(item){var cart=[];if(typeof window!=='undefined'){if(localStorage.getItem('cart')){cart=JSON.parse(localStorage.getItem('cart'));}cart.push(_objectSpread(_objectSpread({},item),{},{count:1}));// remove duplicates\n// build an Array from new Set and turn it back into array using Array.from\n// so that later we can re-map it\n// new set will only allow unique values in it\n// so pass the ids of each object/product\n// If the loop tries to add the same value again, it'll get ignored\n// ...with the array of ids we got on when first map() was used\n// run map() on it again and return the actual product from the cart\n// cart = Array.from(new Set(cart.map(p => p._id))).map(id => {\n//     return cart.find(p => p._id === id);\n// });\nlocalStorage.setItem('cart',JSON.stringify(cart));// next();\n}};export var getCart=function getCart(){if(typeof window!=='undefined'){if(localStorage.getItem('cart')){return JSON.parse(localStorage.getItem('cart'));}}return[];};export var updateItem=function updateItem(productId,count){var cart=[];if(typeof window!=='undefined'){if(localStorage.getItem('cart')){cart=JSON.parse(localStorage.getItem('cart'));}cart.map(function(product,i){if(product._id===productId){cart[i].quantity=count;}});localStorage.setItem('cart',JSON.stringify(cart));}};export var removeItem=function removeItem(removeProduct){var cart=[];if(typeof window!=='undefined'){if(localStorage.getItem('cart')){cart=JSON.parse(localStorage.getItem('cart'));}cart.map(function(product,i){if(product._id===removeProduct){cart.splice(i,1);}});localStorage.setItem('cart',JSON.stringify(cart));}return cart;};export var emptyCart=function emptyCart(next){if(typeof window!=='undefined'){localStorage.removeItem('cart');next();}};export var addSubtotal=function addSubtotal(item){var subTotal=item;if(typeof window!=='undefined'){if(localStorage.getItem('subTotal')){subTotal=JSON.parse(localStorage.getItem('subTotal'));}// remove duplicates\n// build an Array from new Set and turn it back into array using Array.from\n// so that later we can re-map it\n// new set will only allow unique values in it\n// so pass the ids of each object/product\n// If the loop tries to add the same value again, it'll get ignored\n// ...with the array of ids we got on when first map() was used\n// run map() on it again and return the actual product from the cart\nlocalStorage.setItem('subTotal',JSON.stringify(subTotal));// next();\n}};","map":{"version":3,"sources":["/Users/KerrFamily/Desktop/FoodApp/src/Cart/carthelper.js"],"names":["addItem","item","cart","window","localStorage","getItem","JSON","parse","push","count","setItem","stringify","getCart","updateItem","productId","map","product","i","_id","quantity","removeItem","removeProduct","splice","emptyCart","next","addSubtotal","subTotal"],"mappings":"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","sourcesContent":["export const addItem = (item) =>{\n    let cart = [];\n    if(typeof window !== 'undefined'){\n        if(localStorage.getItem('cart')){\n            cart = JSON.parse(localStorage.getItem('cart'))\n        }\n        cart.push({\n            ...item, \n            count: 1\n        })\n\n          // remove duplicates\n        // build an Array from new Set and turn it back into array using Array.from\n        // so that later we can re-map it\n        // new set will only allow unique values in it\n        // so pass the ids of each object/product\n        // If the loop tries to add the same value again, it'll get ignored\n        // ...with the array of ids we got on when first map() was used\n        // run map() on it again and return the actual product from the cart\n\n        // cart = Array.from(new Set(cart.map(p => p._id))).map(id => {\n        //     return cart.find(p => p._id === id);\n        // });\n\n        localStorage.setItem('cart', JSON.stringify(cart));\n       // next();\n    }\n};\n\nexport const getCart = () => {\n    if(typeof window !== 'undefined'){\n        if(localStorage.getItem('cart')){\n            return JSON.parse(localStorage.getItem('cart'));\n        }\n    }\n    return [];\n};\n\nexport const updateItem = (productId, count) => {\n    let cart = [];\n    if(typeof window !== 'undefined'){\n        if(localStorage.getItem('cart')){\n            cart = JSON.parse(localStorage.getItem('cart'));\n        }\n        cart.map((product, i) => {\n            if(product._id === productId){\n                cart[i].quantity = count;\n            }\n        })\n        localStorage.setItem('cart', JSON.stringify(cart));\n    }\n};\n\nexport const removeItem = (removeProduct) => {\n    let cart = [];\n    if(typeof window !== 'undefined'){\n        if(localStorage.getItem('cart')){\n            cart = JSON.parse(localStorage.getItem('cart'));\n        }\n        cart.map((product, i) => {\n            if(product._id === removeProduct){\n                cart.splice(i, 1);\n            }\n        });\n        localStorage.setItem('cart', JSON.stringify(cart));\n    }\n    return cart;\n};\n\nexport const emptyCart = next => {\n    if (typeof window !== 'undefined') {\n        localStorage.removeItem('cart');\n        next();\n    }\n};\n\nexport const addSubtotal = (item) =>{\n    let subTotal = item;\n    if(typeof window !== 'undefined'){\n        if(localStorage.getItem('subTotal')){\n            subTotal = JSON.parse(localStorage.getItem('subTotal'))\n        }\n\n          // remove duplicates\n        // build an Array from new Set and turn it back into array using Array.from\n        // so that later we can re-map it\n        // new set will only allow unique values in it\n        // so pass the ids of each object/product\n        // If the loop tries to add the same value again, it'll get ignored\n        // ...with the array of ids we got on when first map() was used\n        // run map() on it again and return the actual product from the cart\n\n        localStorage.setItem('subTotal', JSON.stringify(subTotal));\n       // next();\n    }\n};"]},"metadata":{},"sourceType":"module"}